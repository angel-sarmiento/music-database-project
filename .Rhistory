p1 / p2 / p3
View(utilities)
# was going to use ggdendra here, but I like the example found in the powerpoints
#standardizing the data
preproc_utils <- preProcess(utilities, method = c("scale", "center"))
new_utilities <- predict(preproc_utils, utilities)
# new_utilities <- new_utilities %>%
#   column_to_rownames("Company")
#hierarchical clustering
util_hclusts <-
tibble(#defining methods
method = c("average",
"single",
"complete")) %>%
mutate(
myhclust = map(method,
~factoextra::hcut(
new_utilities,
#this is important here
hc_method = .x,
hc_func = "hclust",
k = 5))
)
# Making Dendrograms
p1 <-  factoextra::fviz_dend(
util_hclusts$myhclust[[1]],
rect = TRUE
) +
labs(title = paste0("Using ", util_hclusts$method[1],
" linkage"))
p2 <-  factoextra::fviz_dend(
util_hclusts$myhclust[[2]],
rect = TRUE
) +
labs(title = paste0("Using ", util_hclusts$method[2],
" linkage"))
p3 <-  factoextra::fviz_dend(
util_hclusts$myhclust[[3]],
rect = TRUE
) +
labs(title = paste0("Using ", util_hclusts$method[3],
" linkage"))
p1 / p2 / p3
p1 + p2 + p3
p2
# was going to use ggdendra here, but I like the example found in the powerpoints
#standardizing the data
preproc_utils <- preProcess(utilities, method = c("scale", "center"))
new_utilities <- predict(preproc_utils, utilities)
new_utilities <- new_utilities %>%
column_to_rownames("Company")
#hierarchical clustering
util_hclusts <-
tibble(#defining methods
method = c("average",
"single",
"complete")) %>%
mutate(
myhclust = map(method,
~factoextra::hcut(
new_utilities,
#this is important here
hc_method = .x,
hc_func = "hclust",
k = 5))
)
# Making Dendrograms
p1 <-  factoextra::fviz_dend(
util_hclusts$myhclust[[1]],
rect = TRUE
) +
labs(title = paste0("Using ", util_hclusts$method[1],
" linkage"))
p2 <-  factoextra::fviz_dend(
util_hclusts$myhclust[[2]],
rect = TRUE
) +
labs(title = paste0("Using ", util_hclusts$method[2],
" linkage"))
p3 <-  factoextra::fviz_dend(
util_hclusts$myhclust[[3]],
rect = TRUE
) +
labs(title = paste0("Using ", util_hclusts$method[3],
" linkage"))
p2
p1 + p3
p1 + p3 + theme(axis.text.y = element_blank())
p1 + p3 + theme(axis.title.y = element_blank())
p1 + p3 + theme(axis.title.y = element_blank(),
axis.text.x = element_blank())
p1 + p3 + theme(axis.title.y = element_blank(),
axis.text.y = element_blank())
p1 + p3 + theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
# was going to use ggdendra here, but I like the example found in the powerpoints
#standardizing the data
preproc_utils <- preProcess(utilities, method = c("scale", "center"))
new_utilities <- predict(preproc_utils, utilities)
new_utilities <- new_utilities %>%
column_to_rownames("Company")
#hierarchical clustering
util_hclusts <-
tibble(#defining methods
method = c("average",
"single",
"complete")) %>%
mutate(
myhclust = map(method,
~factoextra::hcut(
new_utilities,
#this is important here
hc_method = .x,
hc_func = "hclust"))
)
# Making Dendrograms
p1 <-  factoextra::fviz_dend(
util_hclusts$myhclust[[1]],
rect = TRUE
) +
labs(title = paste0("Using ", util_hclusts$method[1],
" linkage"))
p2 <-  factoextra::fviz_dend(
util_hclusts$myhclust[[2]],
rect = TRUE
) +
labs(title = paste0("Using ", util_hclusts$method[2],
" linkage"))
p3 <-  factoextra::fviz_dend(
util_hclusts$myhclust[[3]],
rect = TRUE
) +
labs(title = paste0("Using ", util_hclusts$method[3],
" linkage"))
p2
#Plotting the other methods and removing one of their y-axis
p1 + p3 + theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
# was going to use ggdendra here, but I like the example found in the powerpoints
#standardizing the data
preproc_utils <- preProcess(utilities, method = c("scale", "center"))
new_utilities <- predict(preproc_utils, utilities)
new_utilities <- new_utilities %>%
column_to_rownames("Company")
#hierarchical clustering
util_hclusts <-
tibble(#defining methods
method = c("average",
"single",
"complete")) %>%
mutate(
myhclust = map(method,
~factoextra::hcut(
new_utilities,
#this is important here
hc_method = .x,
hc_func = "hclust",
k = 5))
)
# Making Dendrograms
p1 <-  factoextra::fviz_dend(
util_hclusts$myhclust[[1]],
rect = TRUE
) +
labs(title = paste0("Using ", util_hclusts$method[1],
" linkage"))
p2 <-  factoextra::fviz_dend(
util_hclusts$myhclust[[2]],
rect = TRUE
) +
labs(title = paste0("Using ", util_hclusts$method[2],
" linkage"))
p3 <-  factoextra::fviz_dend(
util_hclusts$myhclust[[3]],
rect = TRUE
) +
labs(title = paste0("Using ", util_hclusts$method[3],
" linkage"))
p2
#Plotting the other methods and removing one of their y-axis
p1 + p3 + theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
# data summary
#percent demand growth over 5%
utilities %>%
filter(Demand_growth > 5.0) %>%
sort()
# data summary
#percent demand growth over 5%
utilities %>%
filter(Demand_growth > 5.0)
# data summary
#percent demand growth over 5%
utilities %>%
filter(Demand_growth > 5.0) %>%
sort(Demand_growth, decreasing = TRUE)
# data summary
#percent demand growth over 5%
utilities %>%
filter(Demand_growth > 5.0) %>%
sort(Demand_growth, decreasing = TRUE)
# data summary
#percent demand growth over 5%
utilities %>%
filter(Demand_growth > 5.0) %>%
sort(decreasing = TRUE)
# data summary
#percent demand growth over 5%
utilities %>%
select(c("Company", "Demand_growth", "Cost", "Sales")) %>%
filter(Demand_growth > 5.0) %>%
sort(decreasing = TRUE)
# data summary
#percent demand growth over 5%
utilities %>%
select(c("Company", "Demand_growth", "Cost", "Sales")) %>%
filter(Demand_growth > 5.0)
?sort
# data summary
#percent demand growth over 5%
utilities %>%
select(c("Company", "Demand_growth", "Cost", "Sales")) %>%
filter(Demand_growth > 5.0) %>%
arrange(desc(Demand_growth))
# data summary
#percent demand growth over 5%
utilities %>%
# select(c("Company", "Demand_growth", "Cost", "Sales")) %>%
filter(Demand_growth > 5.0) %>%
arrange(desc(Demand_growth))
util_hclust
util_hclusts
util_hclusts[[2]]
summary(util_hclusts[[2]])
util_hclusts[[2]]
View(util_hclusts)
View(util_hclusts[[2]][[1]])
install.packages("geniusr")
source('~/Documents/GitHub/the_past_decade_in_music/genius_get_script.R', echo=TRUE)
setwd("~/Documents/GitHub/the_past_decade_in_music")
source('~/Documents/GitHub/the_past_decade_in_music/genius_get_script.R', echo=TRUE)
source('~/Documents/GitHub/the_past_decade_in_music/genius_get_script.R', echo=TRUE)
View(basic_music_df)
Blonded <- get_album_tracklist_search(artist_name = "Frank Ocean", album_name = "Blonde")
View(Blonded)
Blonded <- get_album(artist_name = "Frank Ocean", album_name = "Blonde")
View(Blonded)
Blonded <- inputs %>%
filter(album.name = "Blonde")
Blonded <- inputs %>%
filter(album.name == "Blonde")
Blonded <- inputs %>%
filter(artist.name == "Frank Ocean")
test <- map2_df(Blonded$artist.name, Blonded$track.name, get_lyrics_search)
### TODO:
artist.name <- inputs$artist.name
track.name <- inputs$track.name
## Getting the new dataframe that is needed
chunks <- split(artist.name, ceiling(seq_along(artist.name)))
chunks2 <- split(track.name, ceiling(seq_along(track.name)))
store <- data.frame()
store <- map2_dfr(chunks[[1]], chunks2[[1]], get_lyrics_search)
##trying to make a for loop to grab all of the data
for (i in 1:14){
Sys.sleep(200)
rbind(store, map2_dfr(chunks[[i]], chunks2[[i]], get_lyrics_search))
i = i + 1
}
### TODO:
artist.name <- inputs$artist.name
track.name <- inputs$track.name
## Getting the new dataframe that is needed
chunks <- split(artist.name, ceiling(seq_along(artist.name)))
chunks2 <- split(track.name, ceiling(seq_along(track.name)))
store <- data.frame()
store <- map2_dfr(chunks[[1]], chunks2[[1]], get_lyrics_search)
##trying to make a for loop to grab all of the data
for (i in 1:14){
Sys.sleep(200)
rbind(store, map2_dfr(chunks[[i]], chunks2[[i]], get_lyrics_search))
i = i + 1
};beepr::beep("coin")
### TODO:
artist.name <- inputs$artist.name
track.name <- inputs$track.name
## Getting the new dataframe that is needed
chunks <- split(artist.name, ceiling(seq_along(artist.name)))
chunks2 <- split(track.name, ceiling(seq_along(track.name)))
store <- data.frame()
store <- map2_dfr(chunks[[1]], chunks2[[1]], get_lyrics_search)
##trying to make a for loop to grab all of the data
for (i in 1:14){
Sys.sleep(20)
rbind(store, map2_dfr(chunks[[i]], chunks2[[i]], get_lyrics_search))
i = i + 1
};beepr::beep("coin")
View(chunks)
inputs %>%
filter(album.name == "Blonde") %>% count()
basic_music_df %>% filter(album.name == "Blonde") %>% count()
View(Blonded)
song1 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[1, 2])
song2 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[2, 2])
song3 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[3, 2])
song4 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[4, 2])
song5 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[5, 2])
song6 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[6, 2])
song7 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[7, 2])
song8 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[8, 2])
song9 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[9, 2])
song10 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[10, 2])
song11 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[11, 2])
song12 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[12, 2])
song13 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[13, 2])
song14 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[14, 2])
song15 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[15, 2])
song16 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[16, 2])
song17 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[17, 2])
View(song4)
song3 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[3, 2])
song3 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[3, 2])
str(Blonded)
song5 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[5, 2])
source('~/Documents/GitHub/the_past_decade_in_music/genius_get_script.R', echo=TRUE)
song1 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[1, 2]) %>%
rbind(store)
song2 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[2, 2]) %>%
rbind(store)
song3 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[3, 2]) %>%
rbind(store)
song4 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[4, 2]) %>%
rbind(store)
song5 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[5, 2]) %>%
rbind(store)
song6 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[6, 2]) %>%
rbind(store)
song7 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[7, 2]) %>%
rbind(store)
song8 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[8, 2]) %>%
rbind(store)
song9 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[9, 2]) %>%
rbind(store)
song10 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[10, 2]) %>%
rbind(store)
song11 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[11, 2]) %>%
rbind(store)
song12 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[12, 2]) %>%
rbind(store)
song13 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[13, 2]) %>%
rbind(store)
song14 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[14, 2]) %>%
rbind(store)
song15 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[15, 2]) %>%
rbind(store)
song16 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[16, 2]) %>%
rbind(store)
song17 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[17, 2]) %>%
rbind(store)
source('~/Documents/GitHub/the_past_decade_in_music/genius_get_script.R', echo=TRUE)
source('~/Documents/GitHub/the_past_decade_in_music/genius_get_script.R', echo=TRUE)
source('~/Documents/GitHub/the_past_decade_in_music/genius_get_script.R', echo=TRUE)
source('~/Documents/GitHub/the_past_decade_in_music/genius_get_script.R', echo=TRUE)
source('~/Documents/GitHub/the_past_decade_in_music/genius_get_script.R', echo=TRUE)
?mutate_at
source('~/Documents/GitHub/the_past_decade_in_music/genius_get_script.R', echo=TRUE)
source('~/Documents/GitHub/the_past_decade_in_music/genius_get_script.R', echo=TRUE)
source('~/Documents/GitHub/the_past_decade_in_music/genius_get_script.R', echo=TRUE)
source('~/Documents/GitHub/the_past_decade_in_music/genius_get_script.R', echo=TRUE)
source('~/Documents/GitHub/the_past_decade_in_music/genius_get_script.R', echo=TRUE)
source('~/Documents/GitHub/the_past_decade_in_music/genius_get_script.R', echo=TRUE)
source('~/Documents/GitHub/the_past_decade_in_music/genius_get_script.R', echo=TRUE)
source('~/Documents/GitHub/the_past_decade_in_music/genius_get_script.R', echo=TRUE)
?as
inputs <- basic_music_df %>%
ungroup() %>%
select(c("artist.name", "track.name")) %>%
mutate_all(funs(str_replace_all(., " + ", " ")))
View(inputs)
?str_replace_all
inputs[3,4]
inputs[3,2]
inputs <- basic_music_df %>%
ungroup() %>%
select(c("artist.name", "track.name")) %>%
mutate_all(funs(str_replace_all(., "+", "")))
inputs <- basic_music_df %>%
ungroup() %>%
select(c("artist.name", "track.name")) %>%
mutate_all(funs(str_replace_all(track.name, "+", "")))
inputs <- basic_music_df %>%
ungroup() %>%
select(c("artist.name", "track.name"))
basic_music_df %>%
ungroup() %>%
select(c("artist.name", "track.name"))
inputs <- basic_music_df %>%
ungroup() %>%
select(c("artist.name", "track.name")) %>%
mutate_all(funs(str_replace_all(track.name, " \\+ ", " ")))
source('~/Documents/GitHub/the_past_decade_in_music/genius_get_script.R', echo=TRUE)
source('~/Documents/GitHub/the_past_decade_in_music/genius_get_script.R', echo=TRUE)
source('~/Documents/GitHub/the_past_decade_in_music/genius_get_script.R', echo=TRUE)
source('~/Documents/GitHub/the_past_decade_in_music/genius_get_script.R', echo=TRUE)
song3 <- get_lyrics_search(artist_name = "Frank Ocean", song_title= "Pink + White") %>%
rbind(songData)
song3 <- get_lyrics_search(artist_name = "Frank Ocean", song_title= "Pink and White") %>%
rbind(songData)
source('~/Documents/GitHub/the_past_decade_in_music/genius_get_script.R', echo=TRUE)
View(songData)
?cbind
songData <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[1, 2])
song2 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[2, 2]) %>%
rbind(songData)
songData <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[1, 2])
song2 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[2, 2]) %>%
cbind(songData)
View(song2)
View(song17)
songData <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[1, 2])
get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[2, 2]) %>%
rbind(songData)
songData <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[1, 2])
get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[2, 2]) %>%
rbind(songData, .x)
get_lyrics_search("Frank Ocean", "Pink White")
artist.name <- inputs$artist.name
track.name <- inputs$track.name
## Getting the new dataframe that is needed
chunks <- split(artist.name, ceiling(seq_along(artist.name)))
chunks2 <- split(track.name, ceiling(seq_along(track.name)))
store <- data.frame()
store <- map2_dfr(chunks[[1]], chunks2[[1]], get_lyrics_search)
##trying to make a for loop to grab all of the data
for (i in 1:14){
rbind(store, map2_dfr(chunks[[i]], chunks2[[i]], get_lyrics_search))
i = i + 1
}
artist.name <- inputs$artist.name
track.name <- inputs$track.name
## Getting the new dataframe that is needed
chunks <- split(artist.name, ceiling(seq_along(artist.name)))
chunks2 <- split(track.name, ceiling(seq_along(track.name)))
store <- data.frame()
store <- map2_dfr(chunks[[1]], chunks2[[1]], get_lyrics_search)
##trying to make a for loop to grab all of the data
for (i in 1:14){
rbind(store, map2_dfr(chunks[[i]], chunks2[[i]], get_lyrics_search))
i = i + 1
}
source('~/Documents/GitHub/the_past_decade_in_music/genius_get_script.R', echo=TRUE)
source('~/Documents/GitHub/the_past_decade_in_music/genius_get_script.R', echo=TRUE)
for (i in 1:14){
map2_dfr(chunks[[i]], chunks2[[i]], get_lyrics_search))
i = i + 1
}
for (i in 1:14){
map2_dfr(chunks[[i]], chunks2[[i]], get_lyrics_search))
i = i + 1
}
map2_dfr(chunks[[i]], chunks2[[i]], get_lyrics_search)
map2_dfr(chunks, chunks2, get_lyrics_search)
map2_dfr(chunks, chunks2, get_lyrics_search)
map2_dfr(chunks, chunks2, get_lyrics_search)
map2_dfr(chunks, chunks2, get_lyrics_search)
map2_dfr(chunks, chunks2, get_lyrics_search)
map2_dfr(chunks, chunks2, get_lyrics_search)
map2_dfr(chunks, chunks2, get_lyrics_search)
map2_dfr(chunks, chunks2, get_lyrics_search)
map2_dfr(chunks, chunks2, get_lyrics_search)
map2_dfr(chunks, chunks2, get_lyrics_search)
map2_dfr(chunks, chunks2, get_lyrics_search)
map2_dfr(chunks, chunks2, get_lyrics_search)
map2_dfr(chunks, chunks2, get_lyrics_search)
map2_dfr(chunks, chunks2, get_lyrics_search)
store <- map2_dfr(chunks[[1]], chunks2[[1]], get_lyrics_search)
store <- map2_dfr(chunks[[1]], chunks2[[1]], get_lyrics_search)
song1 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[1, 2])
song2 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[2, 2])
song4 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[4, 2])
song5 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[5, 2])
song6 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[6, 2])
song7 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[7, 2])
song8 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[8, 2])
song9 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[9, 2])
song10 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[10, 2])
song11 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[11, 2])
song12 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[12, 2])
song13 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[13, 2])
song14 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[14, 2])
song15 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[15, 2])
song16 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[16, 2])
song17 <- get_lyrics_search(artist_name = "Frank Ocean", song_title=Blonded[17, 2])
View(song9)
songs_merged <- do.call("rbind", list(song1, song2, song3, song4, song5, song6,
song7, song8, song9, song10, song11, song12,
song13, song14, song15, song16)
songs_merged <- do.call("rbind", list(song1, song2, song3, song4, song5, song6,
song7, song8, song9, song10, song11, song12,
song13, song14, song15, song16))
songs_merged <- do.call("rbind", list(song1, song2, song3, song4, song5, song6,
song7, song8, song9, song10, song11, song12,
song13, song14, song15, song16))
songs_merged <- do.call("rbind", list(song1, song2, song4, song5, song6,
song7, song8, song9, song10, song11, song12,
song13, song14, song15, song16))
View(songs_merged)
write.csv(songs_merged, "data/lyrics_FO_genius.csv")
setwd("~/Documents/GitHub/music-database-project")
write.csv(songs_merged, "data/lyrics_FO_genius.csv")
